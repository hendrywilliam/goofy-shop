generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Space {
  id                String    @id @default(auto()) @map(name: "_id") @db.ObjectId
  authorId          String    @map(name: "author_id")
  name              String
  city              City      @relation(fields: [cityId], references: [id])
  cityId            String    @db.ObjectId @map(name: "city_id")
  description       String
  numberRooms       Int?      @map(name: "number_rooms") @default(0)
  numberBathrooms   Int?      @map(name: "number_bathrooms") @default(0)
  maxGuest          Int?      @map(name: "max_guest") @default(0)
  price             Int?      @map(name: "price_per_night") @default(0)
  photos            UploadedFile[]
  longitude         Float?
  latitude          Float?
  reviews           SpaceReview[]
  amenities         String[]
  availableDates    DateRange
  bookedDates       DateTime[]
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "spaces")
}

model SpaceReview {
  id        String    @id @default(auto()) @map(name: "_id") @db.ObjectId
  userId    String    @db.ObjectId @map(name: "user_id")
  space     Space     @relation(fields: [spaceId], references: [id])
  spaceId   String    @db.ObjectId @map(name: "place_id")
  content   String    
  stars     Int       @default(5)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "space_reviews")
}

model Amenity {
  id          String    @id @default(auto()) @map(name: "_id") @db.ObjectId
  name        String
  createdAt   DateTime  @default(now()) @map(name:"created_at")
  updatedAt   DateTime  @default(now()) @map(name:"updated_at")

  @@map(name: "amenities")
}

model City {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  space       Space[]
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "cities")
}

model User {
  id                  String    @id @default(auto()) @map(name: "_id") @db.ObjectId
  clerkId             String    @map(name: "clerk_id")
  firstName           String?   @map(name: "first_name")
  lastName            String?   @map(name: "last_name")
  avatar              String
  email               String    
  location            String    
  description         String
  balance             Int?      @default(0)
  totalTransaction    Int?      @map(name: "total_transaction") @default(0)
  //alias name iris for update
  isPartner           Boolean?  @default(false)
  payoutData          PayoutData?
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "user_profiles")
}

model PayoutData {
  id            String  @id @default(auto()) @map(name: "_id") @db.ObjectId
  user          User    @relation(fields: [userId], references: [id])  //fk
  userId        String  @db.ObjectId @unique //1-to-1 must be unique
  email         String  
  @@map("payout_datas")
}

model Reservation {
  id            String              @id @default(auto()) @map(name: "_id") @db.ObjectId
  guestId       String              @map(name: "guest_id")
  spaceId       String              @map(name: "space_id")
  totalPrice    Int                 @map(name: "total_price")
  startDate     DateTime            @map(name: "start_date")
  endDate       DateTime            @map(name: "end_date")
  //distinguish each reservations
  transactionId String?             @map(name: "transaction_id") 
  status        ReservationStatus   @map(name: "reservation_status") @default(ACTIVE)
  paymentStatus PaymentStatus       @map(name: "payment_status") @default(NOT_PAID)        
  createdAt     DateTime            @default(now()) @map(name: "created_at")
  updatedAt     DateTime            @default(now()) @map(name: "updated_at")

  @@map(name: "reservations")
}

type UploadedFile {
  fileKey String
  fileUrl String
}

type DateRange {
  from  DateTime?
  to    DateTime?
}

enum ReservationStatus {
  ACTIVE
  CANCELED
  COMPLETED
}

enum PaymentStatus {
  PAID
  NOT_PAID
}
